// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model RoleClaim {
  id         Int     @id(map: "PK_RoleClaims") @default(autoincrement())
  roleId     String  @db.NVarChar(450)
  claimType  String? @db.NVarChar(Max)
  claimValue String? @db.NVarChar(Max)
  role       Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_RoleClaims_Roles_RoleId")

  @@map("RoleClaims")
}

model Role {
  id               String      @id(map: "PK_Roles") @db.NVarChar(450)
  name             String?     @db.NVarChar(256)
  normalizedName   String?     @db.NVarChar(256)
  concurrencyStamp String?     @db.NVarChar(Max)
  roleClaims       RoleClaim[]
  userRoles        UserRole[]

  @@map("Roles")
}

model UserClaim {
  id         Int     @id(map: "PK_UserClaims") @default(autoincrement())
  userId     String  @db.NVarChar(450)
  claimType  String? @db.NVarChar(Max)
  claimValue String? @db.NVarChar(Max)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_UserClaims_Users_UserId")

  @@map("UserClaims")
}

model UserLogin {
  loginProvider       String  @db.NVarChar(450)
  providerKey         String  @db.NVarChar(450)
  providerDisplayName String? @db.NVarChar(Max)
  userId              String  @db.NVarChar(450)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_UserLogins_Users_UserId")

  @@id([loginProvider, providerKey], map: "PK_UserLogins")
  @@map("UserLogins")
}

model UserRole {
  userId String @db.NVarChar(450)
  roleId String @db.NVarChar(450)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_UserRoles_Roles_RoleId")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_UserRoles_Users_UserId")

  @@id([userId, roleId], map: "PK_UserRoles")
  @@map("UserRole")
}

model User {
  id                          String                     @id(map: "PK_Users") @unique(map: "IX_Users_Id") @db.NVarChar(450)
  userName                    String?                    @db.NVarChar(256)
  normalizedUserName          String?                    @db.NVarChar(256)
  email                       String?                    @unique @db.NVarChar(256)
  normalizedEmail             String?                    @unique @db.NVarChar(256)
  emailConfirmed              Boolean
  passwordHash                String?                    @db.NVarChar(Max)
  securityStamp               String?                    @db.NVarChar(Max)
  concurrencyStamp            String?                    @db.NVarChar(Max)
  phoneNumber                 String?                    @db.NVarChar(Max)
  phoneNumberConfirmed        Boolean
  twoFactorEnabled            Boolean
  lockoutEnd                  DateTime?                  @db.DateTimeOffset
  lockoutEnabled              Boolean
  accessFailedCount           Int
  userClaim                   UserClaim[]
  userLogin                   UserLogin[]
  userRole                    UserRole[]
  userToken                   UserToken[]
  // Non ASP.NET additions
  avatar                      String?
  loginAttempts               UserLoginAttempt[]
  friendRequestsSent          FriendRequest[]            @relation("adding")
  friendRequestsReceived      FriendRequest[]            @relation("added")
  friends                     User[]                     @relation("friends")
  isFriendsWith               User[]                     @relation("friends")
  blocking                    User[]                     @relation("blocked")
  blockedBy                   User[]                     @relation("blocked")
  chats                       Chat[]
  messages                    Message[]
  isAdminIn                   ChatAdmin[]
  clientConnections           ClientConnection[]
  readMessages                ReadMessage[]
  userNotificationSettings    UserNotificationSettings?
  chatNotificationSettings    ChatNotificationSettings[]
  privacyLevel                Int                        @default(1)
  systemMessagesInstigates    SystemMessage[]            @relation("instigated")
  systemMessagesAffectingUser SystemMessage[]            @relation("affectedBy")
  status                      String? // Busy, away, etc
  showStatus                  Boolean                    @default(true) // If false, don't show if online
  lockoutReason               String? // Reason for user being locked out
  userReports                 UserReport[]               @relation("reportingUser")
  reportsAgainstUser          UserReport[]               @relation("reportedUser")
  markedForDeletion           Boolean                    @default(false)
  deletionRequestedIn         DateTime?

  @@index([normalizedEmail], map: "EmailIndex")
  @@index([normalizedUserName], map: "UserNameIndex")
  @@map("Users")
}

model UserToken {
  userId        String  @db.NVarChar(450)
  loginProvider String  @db.NVarChar(450)
  name          String  @db.NVarChar(450)
  value         String? @db.NVarChar(Max)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_UserTokens_Users_UserId")

  @@id([userId, loginProvider, name], map: "PK_UserTokens")
  @@map("UserTokens")
}

// Saving login history
model UserLoginAttempt {
  id             String   @id @default(uuid())
  userId         String   @db.NVarChar(450)
  user           User     @relation(fields: [userId], references: [id])
  attemptedAt    DateTime @default(now())
  ipAddress      String
  geoNameId      String
  cityName       String
  countryIsoCode String
  countryName    String
  latitude       Float
  longitude      Float
  success        Boolean
  os             String   @default("unknown")
  device         String   @default("unknown")
  browser        String   @default("unknown")
}

// Chat and messages
model Chat {
  id                       String                     @id @default(uuid())
  isGroupChat              Boolean                    @default(false)
  maxUsers                 Int                        @default(2)
  chatName                 String?
  users                    User[]
  admins                   ChatAdmin[]
  createdAt                DateTime                   @default(now())
  messages                 Message[]
  systemMessages           SystemMessage[]
  chatNotificationSettings ChatNotificationSettings[]
  userReports              UserReport[]
}

model ChatAdmin {
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.NVarChar(450)
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  @@id([userId, chatId])
}

model Message {
  id          String        @id @default(uuid())
  sentAt      DateTime      @default(now())
  editedAt    DateTime?     @updatedAt
  from        User          @relation(fields: [fromId], references: [id])
  fromId      String        @db.NVarChar(450)
  chat        Chat          @relation(fields: [chatId], references: [id])
  chatId      String
  text        String
  replyTo     Message?      @relation(name: "replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId   String?
  replies     Message[]     @relation("replies")
  readByUsers ReadMessage[]
  userReports UserReport[]
}

model ClientConnection {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.NVarChar(450)
  connectionId   String
  ipAddress      String
  geoNameId      String
  cityName       String
  countryIsoCode String
  countryName    String
  latitude       Float
  longitude      Float
  os             String   @default("unknown")
  device         String   @default("unknown")
  browser        String   @default("unknown")
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
}

model ReadMessage {
  message   Message  @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String   @db.NVarChar(450)
  readAt    DateTime @default(now())

  @@id([messageId, userId])
}

model FriendRequest {
  userAdding       User     @relation(name: "adding", fields: [userAddingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userAddingId     String   @db.NVarChar(450)
  userBeingAdded   User     @relation(name: "added", fields: [userBeingAddedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userBeingAddedId String   @db.NVarChar(450)
  sentAt           DateTime @default(now())

  @@id([userAddingId, userBeingAddedId])
}

// System messages
model SystemMessage {
  id                String   @id @default(uuid())
  chat              Chat     @relation(fields: [chatId], references: [id])
  chatId            String
  firedAt           DateTime @default(now())
  instigatingUser   User     @relation("instigated", fields: [instigatingUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instigatingUserId String   @db.NVarChar(450)
  eventType         String
  affectedUser      User?    @relation("affectedBy", fields: [affectedUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  affectedUserId    String?  @db.NVarChar(450)
}

// Notifications
model UserNotificationSettings {
  userId             String  @id @unique @db.NVarChar(450)
  user               User    @relation(fields: [userId], references: [id])
  playSound          Boolean @default(true)
  showOSNotification Boolean @default(true)
  showAlert          Boolean @default(true)
}

model ChatNotificationSettings {
  userId             String  @db.NVarChar(450)
  user               User    @relation(fields: [userId], references: [id])
  chatId             String
  chat               Chat    @relation(fields: [chatId], references: [id])
  playSound          Boolean @default(true)
  showOSNotification Boolean @default(true)
  showAlert          Boolean @default(true)

  @@id([userId, chatId])
}

// Admin stuff
model UserReport {
  id              String   @id @default(uuid())
  reportingUser   User     @relation("reportingUser", fields: [reportingUserId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  reportingUserId String   @db.NVarChar(450)
  reportedUser    User     @relation("reportedUser", fields: [reportedUserId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  reportedUserId  String   @db.NVarChar(450)
  reportReason    String
  chat            Chat?    @relation(fields: [chatId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  chatId          String?
  message         Message? @relation(fields: [messageId], references: [id])
  messageId       String?
  sentAt          DateTime @default(now())
  violationFound  Boolean?
  adminAction     String?
}
